// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
class HabitTracker {
    constructor() {
        this.currentHabit = null;
        this.completedToday = 0;
        this.totalHabits = 6;
        this.init();
    }

    async init() {
        await this.loadTodayHabit();
        this.setupEventListeners();
    }

    async loadTodayHabit() {
        try {
            const response = await fetch('/api/today_habit');
            const data = await response.json();

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            if (data.progress) {
                this.completedToday = data.progress.completed;
                this.totalHabits = data.progress.total;
                this.updateProgress();
            }

            if (data.habit) {
                this.currentHabit = data.habit;
                this.displayHabit(data.habit);

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∏ —Å–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                document.getElementById('habit-card').style.display = 'block';
                document.getElementById('completion-message').classList.add('hidden');

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ—Å–∫—Ç–æ–ø–∞
                const desktopButtons = document.querySelector('.desktop-buttons');
                if (desktopButtons) {
                    desktopButtons.style.display = 'flex';
                }
            } else if (data.already_completed) {
                // –í—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
                this.showAllCompletedMessage();
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–≤—ã—á–∫–∏:', error);
            this.displayError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É');
        }
    }

    displayHabit(habit) {
        document.getElementById('habit-name').textContent = habit.name;
        document.getElementById('habit-description').textContent = habit.description || '';

        // –î–æ–±–∞–≤–ª—è–µ–º ID –ø—Ä–∏–≤—ã—á–∫–∏ –≤ –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è —Å–≤–∞–π–ø–∞
        document.getElementById('habit-card').dataset.habitId = habit.id;
    }

    displayError(message) {
        document.getElementById('habit-name').textContent = '–û—à–∏–±–∫–∞';
        document.getElementById('habit-description').textContent = message;
    }

    async handleSwipe(completed) {
        if (!this.currentHabit) return;

        try {
            const response = await fetch('/api/swipe', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    habit_id: this.currentHabit.id,
                    completed: completed
                })
            });

            const result = await response.json();

            if (result.success) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                if (result.progress) {
                    this.completedToday = result.progress.completed;
                    this.totalHabits = result.progress.total;
                    this.updateProgress();
                }

                this.animateSwipe(completed);

                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–∏–≤—ã—á–∫—É —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
                setTimeout(() => {
                    this.loadTodayHabit();
                }, 500);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
            this.showError('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞');
        }
    }

    animateSwipe(completed) {
        const card = document.getElementById('habit-card');
        card.classList.add(completed ? 'swipe-right' : 'swipe-left');

        setTimeout(() => {
            card.classList.remove('swipe-right', 'swipe-left');
            card.style.transform = 'translateX(0) rotate(0)';
            card.style.opacity = '1';
        }, 500);
    }

    showAllCompletedMessage() {
        document.getElementById('habit-card').style.display = 'none';
        const messageEl = document.getElementById('completion-message');
        messageEl.classList.remove('hidden');
        messageEl.innerHTML = `
            <h3>üéâ –û—Ç–ª–∏—á–Ω–æ!</h3>
            <p>–í—Å–µ ${this.completedToday} –∏–∑ ${this.totalHabits} –ø—Ä–∏–≤—ã—á–µ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!</p>
            <p>–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫</p>
        `;

        // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ—Å–∫—Ç–æ–ø–∞
        const desktopButtons = document.querySelector('.desktop-buttons');
        if (desktopButtons) {
            desktopButtons.style.display = 'none';
        }
    }

    showError(message) {
        const messageEl = document.getElementById('completion-message');
        messageEl.classList.remove('hidden');
        messageEl.innerHTML = `
            <h3>‚ùå –û—à–∏–±–∫–∞</h3>
            <p>${message}</p>
            <button onclick="location.reload()" class="btn btn-success">–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É</button>
        `;
    }

    updateProgress() {
        document.getElementById('completed-count').textContent = this.completedToday;
        document.getElementById('total-habits').textContent = this.totalHabits;

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
        const progressBar = document.getElementById('progress-bar');
        if (progressBar) {
            const percentage = (this.completedToday / this.totalHabits) * 100;
            progressBar.style.width = `${percentage}%`;
        }
    }

    setupEventListeners() {
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥–µ—Å–∫—Ç–æ–ø–∞
        window.handleSwipe = (completed) => {
            this.handleSwipe(completed);
        };

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        window.refreshApp = () => {
            this.loadTodayHabit();
        };
    }
}

// –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–≤–∞–π–ø–æ–≤ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
class SwipeHandler {
    constructor() {
        this.card = document.getElementById('habit-card');
        this.startX = 0;
        this.currentX = 0;
        this.isSwiping = false;
        this.swipeThreshold = 50;

        if (this.card) {
            this.init();
        }
    }

    init() {
        this.card.addEventListener('touchstart', this.handleTouchStart.bind(this));
        this.card.addEventListener('touchmove', this.handleTouchMove.bind(this));
        this.card.addEventListener('touchend', this.handleTouchEnd.bind(this));

        // –î–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞ —Ç–æ–∂–µ –¥–æ–±–∞–≤–∏–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –º—ã—à–∏
        this.card.addEventListener('mousedown', this.handleMouseDown.bind(this));
        document.addEventListener('mousemove', this.handleMouseMove.bind(this));
        document.addEventListener('mouseup', this.handleMouseUp.bind(this));
    }

    // Touch —Å–æ–±—ã—Ç–∏—è
    handleTouchStart(e) {
        this.startSwipe(e.touches[0].clientX);
    }

    handleTouchMove(e) {
        if (!this.isSwiping) return;
        e.preventDefault();
        this.updateSwipe(e.touches[0].clientX);
    }

    handleTouchEnd() {
        this.endSwipe();
    }

    // Mouse —Å–æ–±—ã—Ç–∏—è
    handleMouseDown(e) {
        this.startSwipe(e.clientX);
        e.preventDefault();
    }

    handleMouseMove(e) {
        if (!this.isSwiping) return;
        this.updateSwipe(e.clientX);
    }

    handleMouseUp() {
        this.endSwipe();
    }

    // –û–±—â–∞—è –ª–æ–≥–∏–∫–∞ —Å–≤–∞–π–ø–∞
    startSwipe(clientX) {
        this.startX = clientX;
        this.currentX = 0;
        this.isSwiping = true;
        this.card.style.transition = 'none';
    }

    updateSwipe(clientX) {
        if (!this.isSwiping) return;

        this.currentX = clientX - this.startX;
        this.updateCardTransform();
        this.updateSwipeVisuals();
    }

    endSwipe() {
        if (!this.isSwiping) return;

        this.isSwiping = false;
        this.card.style.transition = 'transform 0.3s ease';

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ø–æ—Ä–æ–≥ —Å–≤–∞–π–ø–∞
        if (Math.abs(this.currentX) > this.swipeThreshold) {
            const completed = this.currentX > 0; // –≤–ø—Ä–∞–≤–æ - –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –≤–ª–µ–≤–æ - –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
            this.completeSwipe(completed);
        } else {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –Ω–∞ –º–µ—Å—Ç–æ
            this.resetCard();
        }

        this.clearSwipeVisuals();
    }

    updateCardTransform() {
        const rotation = (this.currentX / 10) * (this.currentX > 0 ? 1 : -1);
        this.card.style.transform = `translateX(${this.currentX}px) rotate(${rotation}deg)`;
    }

    updateSwipeVisuals() {
        this.card.classList.remove('swiping-left', 'swiping-right');

        if (this.currentX < -this.swipeThreshold) {
            this.card.classList.add('swiping-left');
        } else if (this.currentX > this.swipeThreshold) {
            this.card.classList.add('swiping-right');
        }
    }

    clearSwipeVisuals() {
        this.card.classList.remove('swiping-left', 'swiping-right');
    }

    resetCard() {
        this.card.style.transform = 'translateX(0) rotate(0)';
    }

    completeSwipe(completed) {
        // –ê–Ω–∏–º–∞—Ü–∏—è —É–ª–µ—Ç–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
        const direction = completed ? 1 : -1;
        this.card.style.transform = `translateX(${direction * 200}px) rotate(${direction * 20}deg)`;
        this.card.style.opacity = '0';

        // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        setTimeout(() => {
            if (window.habitTracker) {
                window.habitTracker.handleSwipe(completed);
            }
        }, 300);
    }
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏
class DateUtils {
    static formatDate(date) {
        return new Date(date).toLocaleDateString('ru-RU');
    }

    static getToday() {
        return new Date().toISOString().split('T')[0];
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    // –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç—Ä–µ–∫–µ—Ä–∞
    window.habitTracker = new HabitTracker();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–≤–∞–π–ø–æ–≤
    new SwipeHandler();

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!document.querySelector('#progress-bar-styles')) {
        const style = document.createElement('style');
        style.id = 'progress-bar-styles';
        style.textContent = `
            .progress-bar {
                width: 100%;
                height: 6px;
                background: #e8e8e8;
                border-radius: 3px;
                margin: 10px 0;
                overflow: hidden;
            }

            .progress-bar-fill {
                height: 100%;
                background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
                border-radius: 3px;
                transition: width 0.3s ease;
            }
        `;
        document.head.appendChild(style);
    }
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
window.debugApp = async () => {
    console.log('=== Debug Information ===');

    try {
        const [habitsResponse, completionsResponse] = await Promise.all([
            fetch('/api/habits'),
            fetch('/api/today_completions')
        ]);

        const habitsData = await habitsResponse.json();
        const completionsData = await completionsResponse.json();

        console.log('–í—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏:', habitsData);
        console.log('–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è:', completionsData);
        console.log('–¢–µ–∫—É—â–∞—è –ø—Ä–∏–≤—ã—á–∫–∞:', window.habitTracker?.currentHabit);
        console.log('–ü—Ä–æ–≥—Ä–µ—Å—Å:', {
            completed: window.habitTracker?.completedToday,
            total: window.habitTracker?.totalHabits
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏:', error);
    }
};