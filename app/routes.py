from flask import Blueprint, render_template, jsonify, request, flash, redirect, url_for
from flask_login import login_user, logout_user, current_user, login_required
from datetime import date, timedelta
import random
from app import db
from app.models import User, Habit, Completion

bp = Blueprint('main', __name__)


# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –ª–æ–≥–∏–Ω –∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏
@bp.route('/')
def index():
    if current_user.is_authenticated:
        return redirect(url_for('main.today'))
    return redirect(url_for('main.login'))


# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞
@bp.route('/login', methods=['GET', 'POST'])
def login():
    if current_user.is_authenticated:
        return redirect(url_for('main.today'))

    if request.method == 'POST':
        username = request.form.get('username')
        password = request.form.get('password')
        user = User.query.filter_by(username=username).first()

        if user and user.check_password(password):
            login_user(user)
            return redirect(url_for('main.today'))
        else:
            flash('–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å')

    return render_template('login.html')


# –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
# –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@bp.route('/register', methods=['GET', 'POST'])
def register():
    if current_user.is_authenticated:
        return redirect(url_for('main.today'))

    if request.method == 'POST':
        username = request.form.get('username')
        email = request.form.get('email')
        password = request.form.get('password')

        if User.query.filter_by(username=username).first():
            flash('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–Ω—è—Ç–æ')
        elif User.query.filter_by(email=email).first():
            flash('Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è')
        else:
            user = User(username=username, email=email)
            user.set_password(password)
            db.session.add(user)
            db.session.commit()  # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            habits_data = [
                ("–†–µ–≥—É–ª—è—Ä–Ω—ã–π —Å–æ–Ω", "–õ–æ–∂–∏—Ç—å—Å—è –∏ –≤—Å—Ç–∞–≤–∞—Ç—å –≤ –æ–¥–Ω–æ –≤—Ä–µ–º—è –¥–∞–∂–µ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ"),
                ("–í–æ–¥–∞ —Å —É—Ç—Ä–∞", "–í—ã–ø–∏—Ç—å —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è"),
                ("–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ", "30 –º–∏–Ω—É—Ç —Ö–æ–¥—å–±—ã, –∑–∞—Ä—è–¥–∫–∏ –∏–ª–∏ —Ä–∞—Å—Ç—è–∂–∫–∏"),
                ("–ü—Ä–∞–≤–∏–ª–æ ¬´1-3-5¬ª –Ω–∞ –¥–µ–Ω—å", "–ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ —Å–≤–æ–π –¥–µ–Ω—å —Ç–∞–∫: 1 –ö–†–£–ü–ù–û–ï –¥–µ–ª–æ, 3 –°–†–ï–î–ù–ò–• –¥–µ–ª–∞ –∏ 5 –ú–ï–õ–ö–ò–• –¥–µ–ª."),
                ("–ú–∏–∫—Ä–æ-–æ–±—É—á–µ–Ω–∏–µ", "–í—ã–¥–µ–ª–∏—Ç–µ 15-20 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å –Ω–∞ –∏–∑—É—á–µ–Ω–∏–µ —á–µ–≥–æ-—Ç–æ –Ω–æ–≤–æ–≥–æ"),
                ("–í–µ—á–µ—Ä–Ω—è—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞", "–ü–æ—Ç—Ä–∞—Ç—å—Ç–µ 10 –º–∏–Ω—É—Ç –≤–µ—á–µ—Ä–æ–º –Ω–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é"),
                ("–ß—Ç–µ–Ω–∏–µ", "–ß–∏—Ç–∞–π—Ç–µ 10 —Å—Ç—Ä–∞–Ω–∏—Ü –≤ –¥–µ–Ω—å (–æ–∫–æ–ª–æ 15-20 –º–∏–Ω—É—Ç)")
            ]

            for name, description in habits_data:
                habit = Habit(name=name, description=description, user_id=user.id)
                db.session.add(habit)

            db.session.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≤—ã—á–∫–∏
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(habits_data)} –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")

            flash('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏.')
            return redirect(url_for('main.login'))

    return render_template('register.html')
# –í—ã—Ö–æ–¥
@bp.route('/logout')
def logout():
    logout_user()
    return redirect(url_for('main.login'))


# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –ø—Ä–∏–≤—ã—á–∫–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö)
@bp.route('/today')
@login_required
def today():
    return render_template('index.html')


# API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –ø—Ä–∏–≤—ã—á–∫–∏
@bp.route('/api/today_habit')
@login_required
def get_today_habit():
    print(f"üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {current_user.username} (ID: {current_user.id})")

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    all_habits = Habit.query.filter_by(is_active=True, user_id=current_user.id).all()
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–∏–≤—ã—á–µ–∫: {len(all_habits)}")

    if not all_habits:
        print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return jsonify({'error': 'No habits found. Please create some habits first.'}), 404

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤—ã—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –ù–ï –±—ã–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —Å–µ–≥–æ–¥–Ω—è
    today = date.today()
    completed_today = Completion.query.filter_by(
        completion_date=today,
        user_id=current_user.id
    ).with_entities(Completion.habit_id).all()
    completed_habit_ids = [c.habit_id for c in completed_today]

    print(f"‚úÖ –£–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {len(completed_habit_ids)} –ø—Ä–∏–≤—ã—á–µ–∫")

    # –ò—â–µ–º –ø—Ä–∏–≤—ã—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —Å–µ–≥–æ–¥–Ω—è
    available_habits = [h for h in all_habits if h.id not in completed_habit_ids]
    print(f"üìã –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {len(available_habits)} –ø—Ä–∏–≤—ã—á–µ–∫")

    if available_habits:
        # –ë–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø—Ä–∏–≤—ã—á–∫—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        habit = random.choice(available_habits)
        print(f"üéØ –í—ã–±—Ä–∞–Ω–∞ –ø—Ä–∏–≤—ã—á–∫–∞: {habit.name}")
        return jsonify({
            'habit': habit.to_dict(),
            'already_completed': False,
            'progress': {
                'completed': len(completed_habit_ids),
                'total': len(all_habits),
                'remaining': len(available_habits)
            }
        })
    else:
        # –í—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        print("üéâ –í—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!")
        return jsonify({
            'habit': None,
            'already_completed': True,
            'progress': {
                'completed': len(completed_habit_ids),
                'total': len(all_habits),
                'remaining': 0
            },
            'message': '–í—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è! üéâ'
        })

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≤–∞–π–ø–∞
@bp.route('/api/swipe', methods=['POST'])
@login_required
def handle_swipe():
    data = request.get_json()
    habit_id = data.get('habit_id')
    completed = data.get('completed')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    habit = Habit.query.filter_by(id=habit_id, user_id=current_user.id).first()
    if not habit:
        return jsonify({'error': 'Habit not found'}), 404

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ —É–∂–µ –æ—Ç–º–µ—á–µ–Ω–∞ —ç—Ç–∞ –ø—Ä–∏–≤—ã—á–∫–∞ —Å–µ–≥–æ–¥–Ω—è
    today = date.today()
    existing_completion = Completion.query.filter_by(
        habit_id=habit_id,
        user_id=current_user.id,
        completion_date=today
    ).first()

    if existing_completion:
        # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–µ
        existing_completion.completed = completed
        db.session.commit()

        completion_data = existing_completion.to_dict()
        message = "–°—Ç–∞—Ç—É—Å –ø—Ä–∏–≤—ã—á–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω"
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
        completion = Completion(
            habit_id=habit_id,
            user_id=current_user.id,
            completed=completed,
            completion_date=today
        )
        db.session.add(completion)
        db.session.commit()

        completion_data = completion.to_dict()
        message = "–ü—Ä–∏–≤—ã—á–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞"

    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    all_habits = Habit.query.filter_by(is_active=True, user_id=current_user.id).all()
    completed_today = Completion.query.filter_by(
        completion_date=today,
        user_id=current_user.id,
        completed=True
    ).count()

    return jsonify({
        'success': True,
        'completion': completion_data,
        'progress': {
            'completed': completed_today,
            'total': len(all_habits),
            'remaining': len(all_habits) - completed_today
        },
        'message': message
    })

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@bp.route('/stats')
@login_required
def stats():
    return render_template('stats.html')


# API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@bp.route('/api/stats')
@login_required
def get_stats():
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    end_date = date.today()
    start_date = end_date - timedelta(days=6)

    completions = Completion.query.filter(
        Completion.completion_date.between(start_date, end_date),
        Completion.user_id == current_user.id
    ).all()

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
    daily_stats = {}
    current_date = start_date
    while current_date <= end_date:
        daily_stats[current_date.isoformat()] = {
            'completed': 0,
            'total': 0,
            'date': current_date.strftime('%d.%m')
        }
        current_date += timedelta(days=1)

    for completion in completions:
        date_key = completion.completion_date.isoformat()
        if date_key in daily_stats:
            daily_stats[date_key]['total'] += 1
            if completion.completed:
                daily_stats[date_key]['completed'] += 1

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    stats_list = []
    for date_key in sorted(daily_stats.keys()):
        day_data = daily_stats[date_key]
        if day_data['total'] > 0:
            day_data['percentage'] = (day_data['completed'] / day_data['total']) * 100
        else:
            day_data['percentage'] = 0
        stats_list.append(day_data)

    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_completions = Completion.query.filter_by(
        completed=True,
        user_id=current_user.id
    ).count()
    total_attempts = Completion.query.filter_by(user_id=current_user.id).count()
    success_rate = (total_completions / total_attempts * 100) if total_attempts > 0 else 0

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    total_habits = Habit.query.filter_by(is_active=True, user_id=current_user.id).count()

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    today_completions = Completion.query.filter_by(
        completion_date=date.today(),
        completed=True,
        user_id=current_user.id
    ).count()

    return jsonify({
        'daily_stats': stats_list,
        'total_completed': total_completions,
        'total_attempts': total_attempts,
        'success_rate': round(success_rate, 1),
        'average_per_week': round(total_completions / max(1, (total_attempts / 7)), 1),
        'today_progress': {
            'completed': today_completions,
            'total': total_habits,
            'percentage': round((today_completions / total_habits * 100) if total_habits > 0 else 0, 1)
        }
    })


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ API endpoints
@bp.route('/api/habits')
@login_required
def get_all_habits():
    habits = Habit.query.filter_by(is_active=True, user_id=current_user.id).all()
    return jsonify({
        'habits': [habit.to_dict() for habit in habits],
        'total': len(habits)
    })


@bp.route('/api/today_completions')
@login_required
def get_today_completions():
    today = date.today()
    completions = Completion.query.filter_by(
        completion_date=today,
        user_id=current_user.id
    ).all()
    return jsonify({
        'completions': [completion.to_dict() for completion in completions],
        'total': len(completions)
    })