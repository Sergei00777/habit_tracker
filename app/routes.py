from flask import Blueprint, render_template, jsonify, request
from datetime import date, timedelta
import random
from app import db
from app.models import Habit, Completion

bp = Blueprint('main', __name__)


@bp.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π –ø—Ä–∏–≤—ã—á–∫–∏"""
    return render_template('index.html')


@bp.route('/api/today_habit')
def get_today_habit():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –ù–ï–í–´–ü–û–õ–ù–ï–ù–ù–£–Æ –ø—Ä–∏–≤—ã—á–∫—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏
    all_habits = Habit.query.filter_by(is_active=True).all()

    if not all_habits:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ –µ—Å–ª–∏ –Ω–µ—Ç –≤ –±–∞–∑–µ
        habits_data = [
            ("–ë—ã—Å—Ç—Ä–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á", "–í—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞—á–∏ –±–µ–∑ –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏–∏"),
            ("–£—Ç—Ä–µ–Ω–Ω—è—è –∑–∞—Ä—è–¥–∫–∞", "15 –º–∏–Ω—É—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É—Ç—Ä–æ–º"),
            ("–ß—Ç–µ–Ω–∏–µ –∫–Ω–∏–≥–∏", "–ß–∏—Ç–∞—Ç—å 30 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å"),
            ("–ú–µ–¥–∏—Ç–∞—Ü–∏—è", "10 –º–∏–Ω—É—Ç –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏ —É–º–∞"),
            ("–ò–∑—É—á–µ–Ω–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ", "–ü—Ä–∞–∫—Ç–∏–∫–∞ —è–∑—ã–∫–∞ 20 –º–∏–Ω—É—Ç"),
            ("–ü—Ä–æ–≥—É–ª–∫–∞ –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ", "–ì—É–ª—è—Ç—å –Ω–µ –º–µ–Ω–µ–µ 30 –º–∏–Ω—É—Ç")
        ]

        for name, description in habits_data:
            habit = Habit(name=name, description=description)
            db.session.add(habit)
        db.session.commit()
        all_habits = Habit.query.filter_by(is_active=True).all()

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤—ã—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –ù–ï –±—ã–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —Å–µ–≥–æ–¥–Ω—è
    today = date.today()
    completed_today = Completion.query.filter_by(
        completion_date=today
    ).with_entities(Completion.habit_id).all()
    completed_habit_ids = [c.habit_id for c in completed_today]

    # –ò—â–µ–º –ø—Ä–∏–≤—ã—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —Å–µ–≥–æ–¥–Ω—è
    available_habits = [h for h in all_habits if h.id not in completed_habit_ids]

    if available_habits:
        # –ë–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø—Ä–∏–≤—ã—á–∫—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        habit = random.choice(available_habits)
        return jsonify({
            'habit': habit.to_dict(),
            'already_completed': False,
            'progress': {
                'completed': len(completed_habit_ids),
                'total': len(all_habits),
                'remaining': len(available_habits)
            }
        })
    else:
        # –í—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        return jsonify({
            'habit': None,
            'already_completed': True,
            'progress': {
                'completed': len(completed_habit_ids),
                'total': len(all_habits),
                'remaining': 0
            },
            'message': '–í—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è! üéâ'
        })


@bp.route('/api/swipe', methods=['POST'])
def handle_swipe():
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–≤–∞–π–ø (–≤—ã–ø–æ–ª–Ω–µ–Ω–æ/–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ)"""
    data = request.get_json()
    habit_id = data.get('habit_id')
    completed = data.get('completed')  # True - –≤–ø—Ä–∞–≤–æ, False - –≤–ª–µ–≤–æ

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏
    habit = Habit.query.get(habit_id)
    if not habit:
        return jsonify({'error': 'Habit not found'}), 404

    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
    completion = Completion(
        habit_id=habit_id,
        completed=completed,
        completion_date=date.today()
    )
    db.session.add(completion)
    db.session.commit()

    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    all_habits = Habit.query.filter_by(is_active=True).all()
    today = date.today()
    completed_today = Completion.query.filter_by(completion_date=today).count()

    return jsonify({
        'success': True,
        'completion': completion.to_dict(),
        'progress': {
            'completed': completed_today,
            'total': len(all_habits),
            'remaining': len(all_habits) - completed_today
        }
    })


@bp.route('/stats')
def stats():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    return render_template('stats.html')


@bp.route('/api/stats')
def get_stats():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    end_date = date.today()
    start_date = end_date - timedelta(days=6)

    completions = Completion.query.filter(
        Completion.completion_date.between(start_date, end_date)
    ).all()

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
    daily_stats = {}
    current_date = start_date
    while current_date <= end_date:
        daily_stats[current_date.isoformat()] = {
            'completed': 0,
            'total': 0,
            'date': current_date.strftime('%d.%m')
        }
        current_date += timedelta(days=1)

    for completion in completions:
        date_key = completion.completion_date.isoformat()
        if date_key in daily_stats:
            daily_stats[date_key]['total'] += 1
            if completion.completed:
                daily_stats[date_key]['completed'] += 1

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    stats_list = []
    for date_key in sorted(daily_stats.keys()):
        day_data = daily_stats[date_key]
        if day_data['total'] > 0:
            day_data['percentage'] = (day_data['completed'] / day_data['total']) * 100
        else:
            day_data['percentage'] = 0
        stats_list.append(day_data)

    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_completions = Completion.query.filter_by(completed=True).count()
    total_attempts = Completion.query.count()
    success_rate = (total_completions / total_attempts * 100) if total_attempts > 0 else 0

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫
    total_habits = Habit.query.filter_by(is_active=True).count()

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    today_completions = Completion.query.filter_by(
        completion_date=date.today(),
        completed=True
    ).count()

    return jsonify({
        'daily_stats': stats_list,
        'total_completed': total_completions,
        'total_attempts': total_attempts,
        'success_rate': round(success_rate, 1),
        'average_per_week': round(total_completions / max(1, (total_attempts / 7)), 1),
        'today_progress': {
            'completed': today_completions,
            'total': total_habits,
            'percentage': round((today_completions / total_habits * 100) if total_habits > 0 else 0, 1)
        }
    })


@bp.route('/api/habits')
def get_all_habits():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)"""
    habits = Habit.query.filter_by(is_active=True).all()
    return jsonify({
        'habits': [habit.to_dict() for habit in habits],
        'total': len(habits)
    })


@bp.route('/api/today_completions')
def get_today_completions():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)"""
    today = date.today()
    completions = Completion.query.filter_by(completion_date=today).all()

    return jsonify({
        'completions': [completion.to_dict() for completion in completions],
        'total': len(completions)
    })